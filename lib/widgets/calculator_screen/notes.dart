import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../blocs/blocs.dart';
import '../../utils/constants.dart';

/// Notes widget for calculator screen.
class Notes extends StatelessWidget {
  /// [iconSize] is generated by parent.
  final double iconSize;

  /// Constructor.
  Notes(this.iconSize);

  @override
  Widget build(BuildContext context) {
    TextEditingController _noteController;
    TextEditingController _titleController;
    return InkWell(
      onTap: () {
        BlocProvider.of<NotesBloc>(context).add(NotesShowEvent());
        Navigator.of(context)
            .push(
          PageRouteBuilder(
            opaque: false,
            barrierDismissible: true,
            pageBuilder: (context, animation, __) {
              return Center(
                child: Container(
                  decoration: BoxDecoration(
                    borderRadius: const BorderRadius.all(
                      Radius.circular(10),
                    ),
                    color: secondaryColor
                        .withOpacity(animation.value == 1 ? 1 : 0),
                    boxShadow: animation.value == 1
                        ? [
                            const BoxShadow(
                              color: Colors.black45,
                              offset: Offset(3, 3),
                              blurRadius: 10,
                            ),
                          ]
                        : null,
                  ),
                  height: MediaQuery.of(context).size.height * .7,
                  width: MediaQuery.of(context).size.width * .8,
                  alignment: Alignment.center,
                  child: BlocBuilder<NotesBloc, NotesState>(
                    condition: (_, state) {
                      return state is NotesShow ? true : false;
                    },
                    builder: (context, state) {
                      _noteController = state.props[0];
                      _titleController = state.props[1];
                      return Material(
                        type: MaterialType.transparency,
                        child: NotesBox(_noteController, _titleController),
                      );
                    },
                  ),
                ),
              );
            },
          ),
        )
            .then(
          (_) {
            BlocProvider.of<NotesBloc>(context)
                .add(NotesUpdateEvent(_noteController, _titleController));
            SystemChrome.restoreSystemUIOverlays();
          },
        );
      },
      child: Icon(
        Icons.create,
        size: iconSize,
      ),
    );
  }
}

/// Creates widget with title and notes text field.
class NotesBox extends StatefulWidget {
  /// [noteController] is the controller for the notes field.
  final TextEditingController noteController;

  /// [titleController] is the controller for the title field.
  final TextEditingController titleController;

  /// Constructor
  NotesBox(this.noteController, this.titleController);

  @override
  _NotesBoxState createState() => _NotesBoxState();
}

class _NotesBoxState extends State<NotesBox> {
  double _bottom;
  final _notesNode = FocusNode();
  final _titleNode = FocusNode();
  @override
  void initState() {
    _bottom = 10.0;
    _notesNode.addListener(() {
      if (_notesNode.hasFocus || _titleNode.hasFocus) {
        _bottom = MediaQuery.of(context).size.height * .3;
      } else {
        _bottom = 10.0;
      }
      setState(() {});
    });

    _titleNode.addListener(() {
      if (_titleNode.hasFocus || _notesNode.hasFocus) {
        _bottom = MediaQuery.of(context).size.height * .3;
      } else {
        _bottom = 10.0;
      }
      setState(() {});
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: <Widget>[
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 10.0),
          child: TextField(
            controller: widget.titleController,
            focusNode: _titleNode,
            autocorrect: false,
            maxLines: 1,
            cursorColor: primaryColor,
            textAlign: TextAlign.center,
            textCapitalization: TextCapitalization.words,
            textInputAction: TextInputAction.done,
            style: TextStyle(
              fontSize: MediaQuery.of(context).size.width / 22,
            ),
            decoration: InputDecoration.collapsed(
                hintText: 'Title...',
                hintStyle: TextStyle(
                  color: Colors.white70,
                ),
                focusColor: primaryColor),
          ),
        ),
        Flexible(
          fit: FlexFit.loose,
          child: SingleChildScrollView(
            reverse: true,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                Padding(
                  padding: EdgeInsets.only(
                      top: 10.0, left: 10.0, right: 10.0, bottom: _bottom),
                  child: TextField(
                    controller: widget.noteController,
                    autocorrect: false,
                    focusNode: _notesNode,
                    maxLines: null,
                    cursorColor: primaryColor,
                    textCapitalization: TextCapitalization.words,
                    style: TextStyle(
                      fontSize: MediaQuery.of(context).size.width / 22,
                    ),
                    decoration: InputDecoration.collapsed(
                        hintText: 'Notes...',
                        hintStyle: TextStyle(
                          color: Colors.white70,
                        ),
                        focusColor: primaryColor),
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
}
